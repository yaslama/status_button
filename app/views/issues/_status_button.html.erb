<%
	if StatusButton::Hooks.is_open?(@project)
%>
<%= javascript_include_tag "status_button.js", :plugin => 'status_button' %>
<%= javascript_include_tag "hotkeys.min.js", :plugin => 'status_button' %>
<div><div class="label"><%= l(:label_change_status) %>:</div><p class="buttons"><%
# Returns an array of statuses that user is able to apply
def all_new_statuses_allowed_to(issue)
	user = User.current
	old_statuses = []
	statuses = [issue.status].compact
	
	# check all reachables status for all roles the user owns
	while (old_statuses != statuses)
		new_statuses = statuses - old_statuses
		old_statuses = statuses
		new_statuses.each do |s|
			statuses += s.find_new_statuses_allowed_to(
				user.admin ? Role.all : user.roles_for_project(issue.project),
				issue.tracker,
				issue.author == user,
				user.id == issue.assigned_to_id
			)
		end
		statuses = statuses.compact.uniq.sort
	end
	issue.blocked? ? statuses.reject {|s| s.is_closed?} : statuses
end
plugin = Redmine::Plugin.find(:status_button)
setting = Setting["plugin_#{plugin.id}"] || plugin.settings[:default]
allowed_statuses = setting[:check_all_status] ? all_new_statuses_allowed_to(@issue) : @issue.new_statuses_allowed_to()
hide_unreachable_status =  setting[:hide_unreachable_status]
if hide_unreachable_status
  display_statuses=allowed_statuses
else
  display_statuses=@issue.tracker.issue_statuses
end
for status in allowed_statuses
	if status.id < 10
	%><script>hotkeys('ctrl+<%="#{status.id}"%>', function() {event.preventDefault(); make_status(<%="#{status.id}"%>);});</script><%
	end
end
for status in display_statuses
	if @issue.status == status
		%><%
	else
		status_id_marker = ""
		if status.id < 10
			status_id_marker = " c-#{status.id}"
		end
		%><%= link_to_if allowed_statuses.include?(status),
			"#{status.name}#{status_id_marker}", "javascript:make_status(#{status.id})" %>&ensp;<%
	end
end
%></p></div>
<%
	end
%>
